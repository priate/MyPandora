package com.pandora.advanced.maths;import com.pandora.tools.min.DateUtils;import java.util.HashMap;import java.util.Map;/** * 一个用递归方式简述的斐波那契数列 * Created by mordor on 17/6/28. */public class Fibonacci {    public static void main(String[] args) {        long l = System.currentTimeMillis();        System.out.print(1 + ", " + 1);        System.out.println(", " + fibonacci(1, 1));        System.out.println("time : " + DateUtils.printConsuming(l));        l = System.currentTimeMillis();        for(int i = 0 ; i < 30 ; i++){            System.out.print(fibonacci_new(i) + ", ");        }        System.out.println("\ntime : " + DateUtils.printConsuming(l));    }    /**     * 第一种方式 仅仅可以打印 计算     * @param num     * @param num2     * @return     */    public static int fibonacci(int num, int num2){        int i = num + num2;        if(514228 < i){           return i;        }        System.out.print(", " + i);        return fibonacci(num2, i);    }    /**     * 使用递归的方式来计算每个斐波那契位置的数值     * @param i     * @return     */    private static Map<Integer, Integer> tempMap = new HashMap<>();    public static int fibonacci_new (int i ){        if (i == 0 || i == 1){            return i ;        }        if(tempMap.containsKey(i))            return tempMap.get(i);        return fibonacci_new(i - 1) + fibonacci_new(i - 2);    }}