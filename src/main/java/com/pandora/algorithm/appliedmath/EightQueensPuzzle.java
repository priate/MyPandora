package com.pandora.algorithm.appliedmath;/** * The eight queens puzzle is the problem of placing eight chess queens on an 8×8 chessboard * so that no two queens threaten each other. * Thus, a solution requires that no two queens share the same row, column, or diagonal. * The eight queens puzzle is an example of the more general n queens problem of placing n non-attacking queens * on an n×n chessboard, for which solutions exist for all natural numbers n with the exception * * Created by mordor on 17/6/22. */public class EightQueensPuzzle {    static final int queens = 8;    static Integer nextQueen = 0 ;    static int[][] queensLocation = new int[queens][2];    static Integer pringNumber = 0 ;    //打印的次数    public static void main(String[] args) {        compute(1);    }    public static boolean compute(int index){        if(index == queens){            return true ;        }        try{            //create checkerboard            for(int row = 0 ; row < queens ; row++) {                for (int col = 0 ; col < queens; col++) {                    if(checkCompare(row, col)){//验证可不可以下一步                        queensLocation[index][0] = row;                        queensLocation[index][1] = col;                        printChess();                        if(compute(++index)) {                            return true ;                        }else{                            System.out.println("index["+index+"] row["+row+"] col["+col+"]");                        }                    }                }            }        }catch (Exception e){            e.printStackTrace();        }        queensLocation[index][0] = -1;        queensLocation[index][1] = -1;        printChess();        return false;    }    public static boolean checkCompare(int row, int col){        for (int i = 0 ; i < queensLocation.length; i ++){            int row_ForwardSlash = queensLocation[i][0];            int col_ForwardSlash = queensLocation[i][1];            //行列之间都不能有重复            if(row == row_ForwardSlash || col == col_ForwardSlash){                return Boolean.FALSE;            }            //正反斜线之内也不能有重复            if(row_ForwardSlash+col_ForwardSlash == row + col || row_ForwardSlash - col_ForwardSlash == row - col){                return Boolean.FALSE;            }        }        return Boolean.TRUE;    }    public static void printChess(){        System.out.println("print number : [" + pringNumber++ + "] nextqueen ["+nextQueen+"]");        for (int[] ints : queensLocation) {            System.out.print("{"+ints[0]+", "+ints[1]+"},");        }        System.out.println();        for( int row = 0 ; row < queens ; row++){            for( int col = 0 ; col < queens ; col++) {                boolean bool = false ;                for(int i = 0 ; i < queens ; i++ ){                    if(row == queensLocation[i][0] && col == queensLocation[i][1]){                        bool = true;                    }                }                if(bool){                    System.out.print("X ");                }else                    System.out.print("+ ");            }            System.out.println();        }        try {            Thread.sleep(1000);        } catch (InterruptedException e) {            e.printStackTrace();        }    }}